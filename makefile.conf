
# Selecting Core
CORTEX_M=7

# ---- Build profile selection ----
# Choose one: flash (0x8000000) | axi (0x24000000)| dtcm (0x20000000)
RUN = axi

ifeq ($(RUN),flash)
  STARTUP      = $(BASE)/startup/startup_flash.c
  LINKER       = linker_flash.ld
  PROFILE_DEFS = -DRUN_FROM_FLASH
else ifeq ($(RUN),axi)
  STARTUP      = $(BASE)/startup/startup_sram.c
  LINKER       = linker_axi.ld
  PROFILE_DEFS = -DBOOTRAM -DRUN_AXI
else ifeq ($(RUN),dtcm)
  STARTUP      = $(BASE)/startup/startup_sram.c
  LINKER       = linker_dtcm.ld
  PROFILE_DEFS = -DBOOTRAM -DRUN_DTCM
else
  $(error RUN must be one of: flash, axi, dtcm)
endif

LDSCRIPTS=-L. -L$(BASE)/ldscripts -T $(LINKER)

# Use newlib-nano. To disable it, specify USE_NANO=
USE_NANO=

# Use seimhosting or not

USE_SEMIHOST=--specs=rdimon.specs

#USE_NOHOST=--specs=nosys.specs -nostdlib -nostartfiles
#USE_NOHOST=--specs=nosys.specs -nostartfiles 

# Compiler & Linker
CC=arm-none-eabi-gcc
CXX=arm-none-eabi-g++

LDLIBS=

LFLAGS=$(USE_NANO) $(USE_NOHOST) $(LDSCRIPTS) $(LDLIBS) $(GC) $(MAP)

STARTUP_DEFS=-D__STARTUP_CLEAR_BSS -D__START=main -D__NO_SYSTEM_INIT -DBOOTRAM

INCLUDES=\
         -I$(BASE)/include \
         -I$(BASE)/external/UGUI \
         -I$(BASE)/external/printf \
         -I$(BASE)/drivers/display/ssd1315 \
         -I$(BASE)/drivers/display/ssd1315_UGUI \
         -I$(BASE)/src/delay \
         -I$(BASE)/src/dwt \
         -I$(BASE)/src/init \
         -I$(BASE)/src/nvic \
         -I$(BASE)/src/syscall \
         -I$(BASE)/src/usart1 \

# Options for specific architecture
ARCH_FLAGS=-mthumb -mcpu=cortex-m$(CORTEX_M)
FPU_FLAGS=-mfpu=fpv5-d16 -mfloat-abi=hard -fsingle-precision-constant

DEBUG_FLAG=-g

# prevent bloating, disable memcpy etc
BUILTIN_FLAG=-fno-builtin

OPTIMIZE_FLAG=-O3

WARN_FLAGS=-Wall -Wextra -Wshadow -Wdouble-promotion -Wformat=2 -Wundef \
    -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls \
    -Wpointer-arith -Wcast-align -Wwrite-strings -Wstrict-overflow

CFLAGS=$(INCLUDES) $(ARCH_FLAGS) $(FPU_FLAGS) $(STARTUP_DEFS) \
       $(STDC_FLAGS) $(DEBUG_FLAG) $(WARN_FLAGS) $(OPTIMIZE_FLAG) \
       -flto -ffunction-sections -fdata-sections $(BUILTIN_FLAG)

CXXFLAGS=$(CFLAGS)

# Link for code size
GC=-Wl,--gc-sections

# Create map file
MAP=-Wl,-Map=$(NAME).map

$(NAME).bin: $(NAME).elf
	arm-none-eabi-objcopy -O binary $< $@

$(NAME).elf: $(NAME).c $(STARTUP)
	$(CC) $^ $(CFLAGS) $(OBJS) $(LFLAGS) $(LIBS) -o $@

$(NAME).o: $(NAME).c $(STARTUP)
	$(CC) $^ $(CFLAGS) $(OBJS) $(LFLAGS) $(LIBS) -o $@

